from http.server import BaseHTTPRequestHandler, HTTPServer
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import hashes
from argon2 import PasswordHasher
from urllib.parse import urlparse, parse_qs
import sqlite3
import base64
import json
import jwt
import datetime
import uuid
import os

hostName = "localhost"
serverPort = 8080
db_name = 'enhanced_jwks_server.db'

# AES Key from environment variable
AES_KEY = os.getenv('NOT_MY_KEY', 'default_key_please_change_me').encode()
ph = PasswordHasher()

# Initialize database and create tables
def initialize_db():
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS keys(
                        kid INTEGER PRIMARY KEY AUTOINCREMENT,
                        key BLOB NOT NULL,
                        exp INTEGER NOT NULL,
                        iv BLOB NOT NULL
                     )''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS users(
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        username TEXT NOT NULL UNIQUE,
                        password_hash TEXT NOT NULL,
                        email TEXT UNIQUE,
                        date_registered TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        last_login TIMESTAMP
                     )''')
    cursor.execute('''CREATE TABLE IF NOT EXISTS auth_logs(
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        request_ip TEXT NOT NULL,
                        request_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        user_id INTEGER,
                        FOREIGN KEY(user_id) REFERENCES users(id)
                     )''')
    conn.commit()
    conn.close()

# Encrypt private key with AES
def encrypt_key(pem_data):
    iv = os.urandom(16)
    cipher = Cipher(algorithms.AES(AES_KEY), modes.CFB(iv))
    encryptor = cipher.encryptor()
    encrypted_data = encryptor.update(pem_data) + encryptor.finalize()
    return encrypted_data, iv

# Decrypt private key with AES
def decrypt_key(encrypted_data, iv):
    cipher = Cipher(algorithms.AES(AES_KEY), modes.CFB(iv))
    decryptor = cipher.decryptor()
    return decryptor.update(encrypted_data) + decryptor.finalize()

# Store encrypted private key in the database
def store_key_in_db(pem_data, exp_timestamp):
    encrypted_data, iv = encrypt_key(pem_data)
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    cursor.execute('INSERT INTO keys (key, exp, iv) VALUES (?, ?, ?)', (encrypted_data, exp_timestamp, iv))
    conn.commit()
    conn.close()

# Retrieve a key from the database
def get_key_from_db(expired=False):
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    now = int(datetime.datetime.utcnow().timestamp())
    query = 'SELECT key, iv FROM keys WHERE exp <= ? LIMIT 1' if expired else 'SELECT key, iv FROM keys WHERE exp > ? LIMIT 1'
    cursor.execute(query, (now,))
    row = cursor.fetchone()
    conn.close()
    return decrypt_key(row[0], row[1]) if row else None

# Retrieve all valid keys
def get_all_valid_keys():
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    now = int(datetime.datetime.utcnow().timestamp())
    cursor.execute('SELECT key, iv FROM keys WHERE exp > ?', (now,))
    rows = cursor.fetchall()
    conn.close()
    return [decrypt_key(row[0], row[1]) for row in rows]

# User registration function
def register_user(username, email):
    password = str(uuid.uuid4())
    hashed_password = ph.hash(password)
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    cursor.execute('INSERT INTO users (username, password_hash, email) VALUES (?, ?, ?)', (username, hashed_password, email))
    conn.commit()
    conn.close()
    return password

# Log authentication requests
def log_auth_request(ip, user_id=None):
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    cursor.execute('INSERT INTO auth_logs (request_ip, user_id) VALUES (?, ?)', (ip, user_id))
    conn.commit()
    conn.close()

# Convert integer to Base64URL
def int_to_base64(value):
    value_hex = format(value, 'x')
    if len(value_hex) % 2 == 1:
        value_hex = '0' + value_hex
    value_bytes = bytes.fromhex(value_hex)
    encoded = base64.urlsafe_b64encode(value_bytes).rstrip(b'=')
    return encoded.decode('utf-8')

class MyServer(BaseHTTPRequestHandler):
    def do_POST(self):
        parsed_path = urlparse(self.path)
        if parsed_path.path == "/auth":
            ip = self.client_address[0]
            pem = get_key_from_db(expired=False)
            if pem:
                token_payload = {"user": "username", "exp": datetime.datetime.utcnow() + datetime.timedelta(hours=1)}
                encoded_jwt = jwt.encode(token_payload, pem, algorithm="RS256")
                log_auth_request(ip, user_id=None)  # Update to get actual user_id if implemented
                self.send_response(200)
                self.end_headers()
                self.wfile.write(bytes(encoded_jwt, "utf-8"))
            else:
                self.send_response(500)
                self.end_headers()
            return

        if parsed_path.path == "/register":
            content_length = int(self.headers['Content-Length'])
            post_data = json.loads(self.rfile.read(content_length))
            username, email = post_data["username"], post_data["email"]
            password = register_user(username, email)
            self.send_response(201)
            self.end_headers()
            self.wfile.write(bytes(json.dumps({"password": password}), "utf-8"))
            return

        self.send_response(405)
        self.end_headers()

    def do_GET(self):
        if self.path == "/.well-known/jwks.json":
            keys = get_all_valid_keys()
            jwks_keys = []
            for key_pem in keys:
                private_key = serialization.load_pem_private_key(key_pem, password=None)
                public_numbers = private_key.public_key().public_numbers()
                jwks_keys.append({
                    "alg": "RS256",
                    "kty": "RSA",
                    "use": "sig",
                    "kid": "goodKID",
                    "n": int_to_base64(public_numbers.n),
                    "e": int_to_base64(public_numbers.e),
                })
            self.send_response(200)
            self.send_header("Content-type", "application/json")
            self.end_headers()
            self.wfile.write(bytes(json.dumps({"keys": jwks_keys}), "utf-8"))
            return

        self.send_response(405)
        self.end_headers()

if __name__ == "__main__":
    initialize_db()

    # Generate and store initial keys
    private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
    pem = private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.TraditionalOpenSSL,
        encryption_algorithm=serialization.NoEncryption()
    )
    store_key_in_db(pem, int((datetime.datetime.utcnow() + datetime.timedelta(hours=1)).timestamp()))

    webServer = HTTPServer((hostName, serverPort), MyServer)
    try:
        print(f"Server started at http://{hostName}:{serverPort}")
        webServer.serve_forever()
    except KeyboardInterrupt:
        pass
    webServer.server_close()
\m;y12wdlnmnuuy9hyy
